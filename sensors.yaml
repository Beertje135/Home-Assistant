# CUSTOM SENSOR AFVAL

- platform: afvalbeheer
  wastecollector: RecycleApp
  resources:
    - restafval
    - papier
    - pmd
    - glas 
  postcode: !secret zone_home_postcode
  streetname: !secret zone_home_streetname
  streetnumber: !secret zone_home_housenumber
  dateformat: '%Y-%m-%d'
  dateonly: 1
  dutch: 1
  builtinicons: 1

# SENSORS TO CALCULATE MIN AND MAX FOR OUTSIDE TEMPERATURE

- platform: min_max
  unique_id: hue_sensor_buiten_temperature
  type: min
  name: hue_sensor_buiten_temperature
  entity_ids:
  - sensor.hue_outdoor_sensor_3_temperature
  - sensor.hue_outdoor_sensor_1_temperature
  - sensor.hue_outdoor_sensor_2_temperature


# SENSORS USED TO DIPLAY ONLY CURRENT TEMPERATURE ON FRONTEND (ELSE YOU HAVE SET TEMPERATURE)

- platform: template
  sensors:
    climate_elmo_attribute_current_temperature:
      unique_id: elmo_temp
      value_template: "{{ (state_attr('climate.elmo', 'current_temperature') | float ) | round(2) }}"
      unit_of_measurement: '°C'
    climate_trix_attribute_current_temperature:
      unique_id: trix_temp
      value_template: "{{ (state_attr('climate.trix', 'current_temperature') | float ) | round(2) }}"
      unit_of_measurement: '°C'

# SENSORS USED IN LONG TERM DATA TO SEE INFLUENCE OF DELTA TEMPERATURES ON GAS USE

- platform: template
  sensors:
    template_ons_huisje_set_temperature:
      value_template: "{{ (((state_attr('climate.badkamer', 'temperature') | float(0) ) + (state_attr('climate.slaapkamer', 'temperature') | float(0) ) + (state_attr('climate.keuken', 'temperature') | float(0) ) + (state_attr('climate.woonkamer', 'temperature') | float(0) ) + (state_attr('climate.dressing', 'temperature') | float(0) ) + (state_attr('climate.trix', 'temperature') | float(0) ) + (state_attr('climate.elmo', 'temperature') | float(0) )) / 7) | round(2) }}"
      unit_of_measurement: '°C'

- platform: template
  sensors:
    template_delta_set_temperature:
      value_template: >
        {% set diffa = ((states('sensor.template_ons_huisje_set_temperature') | float(0) ) - (states('sensor.hue_outdoor_sensor_2_temperature') | float(0) )) | round (2) %}
        {{ diffa if diffa > 0 else (diffa * -1)}}
      unit_of_measurement: '°C'

- platform: template
  sensors:
    template_delta_temperature:
      value_template: >
        {% set diffb = ((state_attr('climate.ons_huisje', 'current_temperature') | float(0) ) - (states('sensor.hue_outdoor_sensor_2_temperature') | float(0) )) | round (2) %}
        {{ diffb if diffb > 0 else (diffb * -1)}}
      unit_of_measurement: '°C'

# CREATE HUE SENSOR FOR THE VERANDA BASED ON LIVINGROOM AND KITCHEN 

- platform: template
  sensors:
    hue_sensor_veranda_light_level:
      unique_id: hue_sensor_veranda_light_level
      value_template: >
        {{ (((states('sensor.hue_motion_sensor_2_light_level') | float(0)) + (states('sensor.hue_motion_sensor_2_light_level') | float(0)) + (states('sensor.hue_motion_sensor_3_light_level') | float(0))) / 3) | round(2) }}
      unit_of_measurement: 'lx'
    hue_sensor_veranda_temperature:
      unique_id: hue_sensor_veranda_temperature
      value_template: "{{ (((state_attr('climate.woonkamer', 'current_temperature') | float(0) ) + (state_attr('climate.keuken', 'current_temperature') | float(0) )) / 2) | round(2) }}"
      unit_of_measurement: '°C'

# SENSOR TO MONITOR TRAIN CONNECTION

- platform: template
  sensors:
    nmbs_template:
      unique_id: nmbs_template
      value_template: "{{ state_attr('sensor.nmbs', 'vehicle_id') }}"
    nmbs_2_template:
      unique_id: nmbs_2_template
      value_template: "{{ state_attr('sensor.nmbs_2', 'vehicle_id') }}"
    nmbs_3_template:
      unique_id: nmbs_3_template
      value_template: "{{ state_attr('sensor.nmbs_3', 'vehicle_id') }}"
    nmbs_4_template:
      unique_id: nmbs_4_template
      value_template: "{{ state_attr('sensor.nmbs_4', 'vehicle_id') }}"

# SENSORS TO ADAPT SOLAR EDGE DISPLAYED UNITS

- platform: template
  sensors:
    solaredge_energy_today_template:
      unique_id: solaredge_energy_today_template
      value_template: "{{ (states('sensor.solaredge_energy_today') | float(0) / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredge_energy_this_month_template:
      unique_id: solaredge_energy_this_month_template
      value_template: "{{ (states('sensor.solaredge_energy_this_month') | float(0) / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredge_energy_this_year_template:
      unique_id: solaredge_energy_this_year_template
      value_template: "{{ (states('sensor.solaredge_energy_this_year') | float(0) / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredge_lifetime_energy_template:
      unique_id: solaredge_lifetime_energy_template
      value_template: "{{ (states('sensor.solaredge_lifetime_energy') | float(0) / 1000000) | round(2) }}"
      unit_of_measurement: 'MWh'

# SENSOR TO CHECK STATE OF RASPBERRY PI

#- platform: systemmonitor
#  resources:
#    - type: disk_use_percent
#      arg: /home
#    - type: memory_use_percent
#    - type: processor_use
#    - type: last_boot

# SENSOR TO USE DATE AND TIME

- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
